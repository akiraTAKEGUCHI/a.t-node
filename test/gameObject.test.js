"use strict";
var should = require('should');
var assert = require('assert');
var gameObjectClass = require('../public/javascripts/gameObject.js'), GameObjectList = gameObjectClass.GameObjectList, Player = gameObjectClass.Player, PlayerList = gameObjectClass.PlayerList, Crystal = gameObjectClass.Crystal, Weapon = gameObjectClass.Weapon, WeaponList = gameObjectClass.WeaponList, Enemy = gameObjectClass.Enemy, EnemyList = gameObjectClass.EnemyList;

describe('PlayerList', function() {
    it('#generateSendData (if there is no change, server should send no data)', function(done) {
        var serverPlayerList = PlayerList();
        var player = Player({
            userID : 'a',
            hp : 1,
            position : {
                x : 1,
                y : 1
            },
            layer : 1,
            mapID : '1'
        });
        serverPlayerList.add(player);
        var prevPlayerListData = serverPlayerList.getCurrentParameters();

        var sendData = serverPlayerList.generateSendData({
            prevData : prevPlayerListData
        });

        sendData.should.be.empty;
        done();
    });
    it('#importDiff (import data from server generated by #generateSendData and changed position)', function(done) {
        var serverPlayerList = PlayerList();
        var player = Player({
            userID : 'a',
            hp : 1,
            position : {
                x : 1,
                y : 1
            },
            layer : 1,
            mapID : '1'
        });
        serverPlayerList.add(player);
        var prevPlayerListData = serverPlayerList.getCurrentParameters();

        player.setPosition({
            x : 2,
            y : 2
        });
        var sendData = serverPlayerList.generateSendData({
            prevData : prevPlayerListData
        });

        var clientPlayerList = PlayerList();
        clientPlayerList.importDiff(sendData);

        should.equal(clientPlayerList.get(player.getID()).position.x, player.position.x);
        should.equal(clientPlayerList.get(player.getID()).position.y, player.position.y);
        done();
    });
    it('#importDiff (import data from server generated by #generateSendData and changed HP)', function(done) {
        var serverPlayerList = PlayerList();
        var player = Player({
            userID : 'a',
            hp : 1,
            position : {
                x : 1,
                y : 1
            },
            layer : 1,
            mapID : '1'
        });
        serverPlayerList.add(player);
        var prevPlayerListData = serverPlayerList.getCurrentParameters();

        player.setHP(2);

        var sendData = serverPlayerList.generateSendData({
            prevData : prevPlayerListData
        });

        var clientPlayerList = PlayerList();
        clientPlayerList.importDiff(sendData);

        should.equal(clientPlayerList.get(player.getID()).getHP(), player.getHP());
        done();
    });
    it('#importDiff (import data from server generated by #generateSendData and changed Layer)', function(done) {
        var serverPlayerList = PlayerList();
        var player = Player({
            userID : 'a',
            hp : 1,
            position : {
                x : 1,
                y : 1
            },
            layer : 1,
            mapID : '1'
        });
        serverPlayerList.add(player);
        var prevPlayerListData = serverPlayerList.getCurrentParameters();

        player.setLayer(2);

        var sendData = serverPlayerList.generateSendData({
            prevData : prevPlayerListData
        });

        var clientPlayerList = PlayerList();
        clientPlayerList.importDiff(sendData);

        should.equal(clientPlayerList.get(player.getID()).getLayer(), player.getLayer());
        done();
    });
        it('#importDiff (import data from server generated by #generateSendData and changed Layer)', function(done) {
        var serverPlayerList = PlayerList();
        var player = Player({
            userID : 'a',
            hp : 1,
            position : {
                x : 1,
                y : 1
            },
            layer : 1,
            mapID : '1',
            state : 0,
        });
        serverPlayerList.add(player);
        var prevPlayerListData = serverPlayerList.getCurrentParameters();

        player.setState(1);

        var sendData = serverPlayerList.generateSendData({
            prevData : prevPlayerListData
        });

        var clientPlayerList = PlayerList();
        clientPlayerList.importDiff(sendData);

        should.equal(clientPlayerList.get(player.getID()).getState(), player.getState());
        done();
    });
});

describe('WeaponList', function() {
    it('#importDiff (import data from server generated by #generateSendData and changed position)', function(done) {
        var serverWeaponList = WeaponList();
        var weapon = Weapon({
            position : {
                x : 1,
                y : 1
            },
            parentID : '1'
        });

        serverWeaponList.add(weapon);
        var prevWeaponListData = serverWeaponList.getCurrentParameters();

        weapon.setPosition({
            x : 2,
            y : 2
        });

        var sendData = serverWeaponList.generateSendData({
            prevData : prevWeaponListData
        });

        var clientWeaponList = WeaponList();
        clientWeaponList.importDiff(sendData);

        should.equal(clientWeaponList.getObjectList()[weapon.getID()].position.x, weapon.position.x);
        should.equal(clientWeaponList.getObjectList()[weapon.getID()].position.y, weapon.position.y);
        done();
    });

    describe('EnemyList', function() {
        it('#generateSendData (if there is no change, server should send no data)', function(done) {
            var serverEnemyList = EnemyList();
            var enemy = Enemy({
                userID : 'a',
                hp : 1,
                position : {
                    x : 1,
                    y : 1
                },
                layer : 1,
                mapID : '1'
            });
            serverEnemyList.add(enemy);
            var prevEnemyListData = serverEnemyList.getCurrentParameters();

            var sendData = serverEnemyList.generateSendData({
                prevData : prevEnemyListData
            });

            sendData.should.be.empty;
            done();
        });
        it('#importDiff (import data from server generated by #generateSendData and changed position)', function(done) {
            var serverEnemyList = EnemyList();
            var enemy = Enemy({
                userID : 'a',
                hp : 1,
                position : {
                    x : 1,
                    y : 1
                },
                layer : 1,
                mapID : '1'
            });
            serverEnemyList.add(enemy);
            var prevEnemyListData = serverEnemyList.getCurrentParameters();

            enemy.setPosition({
                x : 2,
                y : 2
            });
            var sendData = serverEnemyList.generateSendData({
                prevData : prevEnemyListData
            });

            var clientEnemyList = EnemyList();
            clientEnemyList.importDiff(sendData);

            should.equal(clientEnemyList.get(enemy.getID()).position.x, enemy.position.x);
            should.equal(clientEnemyList.get(enemy.getID()).position.y, enemy.position.y);
            done();
        });
        it('#importDiff (import data from server generated by #generateSendData and changed HP)', function(done) {
            var serverEnemyList = EnemyList();
            var enemy = Enemy({
                userID : 'a',
                hp : 1,
                position : {
                    x : 1,
                    y : 1
                },
                layer : 1,
                mapID : '1'
            });
            serverEnemyList.add(enemy);
            var prevEnemyListData = serverEnemyList.getCurrentParameters();

            enemy.setHP(2);

            var sendData = serverEnemyList.generateSendData({
                prevData : prevEnemyListData
            });

            var clientEnemyList = EnemyList();
            clientEnemyList.importDiff(sendData);

            should.equal(clientEnemyList.get(enemy.getID()).getHP(), enemy.getHP());
            done();
        });
        it('#importDiff (import data from server generated by #generateSendData and changed Layer)', function(done) {
            var serverEnemyList = EnemyList();
            var enemy = Enemy({
                userID : 'a',
                hp : 1,
                position : {
                    x : 1,
                    y : 1
                },
                layer : 1,
                mapID : '1'
            });
            serverEnemyList.add(enemy);
            var prevEnemyListData = serverEnemyList.getCurrentParameters();

            enemy.setLayer(2);

            var sendData = serverEnemyList.generateSendData({
                prevData : prevEnemyListData
            });

            var clientEnemyList = EnemyList();
            clientEnemyList.importDiff(sendData);

            should.equal(clientEnemyList.get(enemy.getID()).getLayer(), enemy.getLayer());
            done();
        });
    });

});

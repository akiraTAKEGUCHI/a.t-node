"use strict";
var should = require('should');
var assert = require('assert');
var Map = require('../public/javascripts/map.js').Map;

describe('Map', function() {
    it('#generateSendData (if there is no change, server should send no data)', function(done) {
        var mapData = Map({
            width : 100,
            height : 100
        }).init({
            width : 100,
            height : 100
        });
        mapData.createMapData(100, 100);

        var prevMapData = mapData.getMapDataCopy();
        var sendData = mapData.generateSendData({
            prevData : prevMapData
        });

        sendData.should.have.length(0);

        done();
    });
    it('#importDiff (import data from server generated by #generateSendData, should serverData equal clientData)', function(done) {
        var serverMapData = Map({
            width : 100,
            height : 100
        }).init({
            width : 100,
            height : 100
        });
        serverMapData.createMapData(100, 100);

        var prevMapData = serverMapData.getMapDataCopy();

        //直前のデータが無いときは全て送信されるはず
        var sendData = serverMapData.generateSendData({
            prevData : []
        });

        sendData.should.not.be.empty;

        var clientMap = Map({
            width : 100,
            height : 100
        }).init({
            width : 100,
            height : 100
        });
        
        //全て受信してコピーされているはず
        clientMap.importDiff(sendData);
        var clientCurrentMapData = clientMap.getMapData();
        var suberCurrentMapData = serverMapData.getMapData();
        for(var i=0;i<clientCurrentMapData.length;i++){
            for(var j=0;j<clientCurrentMapData.length;j++){
                should.equal(clientCurrentMapData[i][j],suberCurrentMapData[i][j]);
            }
        }
        
        
        //変更を加えたらそれのみを送信
        serverMapData.setMapObject(1, 1, clientMap.objectTypeID.crystal);
        serverMapData.setMapObject(2, 2, clientMap.objectTypeID.crystal);

        sendData = serverMapData.generateSendData({
            prevData : prevMapData
        });
        
        sendData.should.not.be.empty;
        
        clientMap.importDiff(sendData);
        clientCurrentMapData = clientMap.getMapData();
        suberCurrentMapData = serverMapData.getMapData();
        for(var i=0;i<clientCurrentMapData.length;i++){
            for(var j=0;j<clientCurrentMapData.length;j++){
                should.equal(clientCurrentMapData[i][j],suberCurrentMapData[i][j]);
            }
        }

        done();
    });
});
